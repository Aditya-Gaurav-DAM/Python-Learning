========================================
===========class method=================
========================================
1. the classmethod() method returns a class method for the given function.
2. The syntax of classmethod() method is: classmethod(function)
@classmethod
def func(cls, args...)
3. A class method is a method that is bound to a class rather than its object. 
It doesn't require creation of a class instance, much like staticmethod.
4. Class method works with the class since its parameter is always the class itself.
5. The class method can be called both by the class and its object.
Class.classmethod()
Or even
Class().classmethod()

6. Create class method using classmethod()
class Person:
    age = 25

    def printAge(cls):
        print('The age is:', cls.age)
# create printAge class method
Person.printAge = classmethod(Person.printAge)
Person.printAge()
#The age is: 25
7. A class method receives the class as implicit first argument, just like an instance 
method receives the instance

class C(object):
    @classmethod
    def fun(cls, arg1, arg2, ...):
       ....
fun: function that needs to be converted into a class method
returns: a class method for function.
8. It can modify a class state that would apply across all the instances of the class. 
=============================
class abc:
    print("class method")
    age = 20
    def inner(cls):
        print("the age is ",cls.age)
abc.inner = classmethod(abc.inner)
abc.inner()

#class method
#the age is  20
============================
class abc:
    print("class method")
    age = 20
    @classmethod
    def inner(cls,age):
        print("the age is ",age)
abc.inner = classmethod(abc.inner(10))

#class method
#the age is  10
============================
class abc:
    print("class abc")
    @classmethod
    def inner(cls,age):
        print("age is ",age)
abc.inner = classmethod(abc.inner(20))

#class abc
#age is  20
============================
class outer:
    def __init__(self,fname,lname):
        self.firstname = fname
        self.lastname = lname

    @classmethod
    def inner01(cls,salary,rollno):
        outer.xyzanything = salary
        outer.rollno1 = rollno
obj = outer("kumar","anuj")
outer.inner01(1000,101)
print(outer.xyzanything)
print(obj.xyzanything)
print(outer.rollno1)
print(obj.rollno1)
print(obj.firstname)
print(obj.lastname)

#1000
#1000
#101
#101
#kumar
#anuj
========================================
class outer:

    @classmethod
    def inner01(cls,salary,rollno):
        outer.salary1 = salary
        outer.rollno1 = rollno
        print("roll no is ",rollno)
        print("salary  is ",salary)

    @classmethod
    def inner02(cls,fname,lname):
        outer.fname1=fname
        outer.lname1=lname

outer.inner01 = classmethod(outer.inner01(100,10))

#roll no is  10
#salary  is  100
========================================
class outer:

    @classmethod
    def inner01(cls,salary,rollno):
        outer.salary1 = salary
        outer.rollno1 = rollno

    @classmethod
    def inner02(cls,fname,lname):
        outer.fname1=fname
        outer.lname1=lname
obj = outer()
outer.inner01(100,10)
print(outer.salary1)
print(outer.rollno1)
outer.inner02("kumar","anuj")
print(outer.fname1)
print(outer.lname1)

#100
#10
#kumar
#anuj
=========================================
class outer:

    @classmethod
    def inner01(cls,salary,rollno):
        outer.salary1 = salary
        outer.rollno1 = rollno
        print("roll no is ",rollno)
        print("salary  is ",salary)

    @classmethod
    def inner02(cls,fname,lname):
        outer.fname1=fname
        outer.lname1=lname

outer().inner01 = classmethod(outer.inner01(100,10))

#roll no is  10
#salary  is  100

=========================================
===========static method=================
=========================================
1. A static method does not receive an implicit first argument.

class C(object):
    @staticmethod
    def fun(arg1, arg2, ...):
        ...
returns: a static method for function fun.

2. A static method can’t access or modify class state.
3. It is present in a class because it makes sense for the method to be present in class.

===========================================
class outer:
    @staticmethod
    def inner01(salary,rollno):
        outer.salary1 = salary
        outer.rollno1 = rollno
        print("roll no is ",rollno)
        print("salary  is ",salary)
    @staticmethod
    def inner02(fname,lname):
        outer.fname1=fname
        outer.lname1=lname
        print("fname is ", fname)
        print("lname  is ", lname)
outer.inner01 = staticmethod(outer.inner01(100,10))
outer().inner02 = staticmethod(outer.inner02("kumar","anuj"))

#roll no is  10
#salary  is  100
#fname is  kumar
#lname  is  anuj

===========================================
====Class method vs Static Method==========
===========================================
1. A class method takes cls as first parameter while a static method needs no specific parameters.
2. A class method can access or modify class state while a static method can’t access or modify it.
3. In general, static methods know nothing about class state. They are utility type methods that take 
some parameters and work upon those parameters. On the other hand class methods must have class as parameter.
4. We use @classmethod decorator in python to create a class method and we use @staticmethod 
decorator to create a static method in python.


