#Write a factorial program using python where user should give the input. Do using function. 
#Handle the errors in the factorial program written by you. Ex- if u give 0! Then what will be output. Or any invalid input if given then how you will handle the errors
num = int(input("enter the number :"))
factorial = 1
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("invalid numvber")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)
================================================================
#Different Data types in python?
Data Types in Python
Python Numbers
Python List
Python Tuple
Python Strings
Python Set
Python Dictionary
Conversion between data types
==================================================================
#Write a dictionary?
A dictionary is a collection which is unordered, changeable and indexed.
In Python dictionaries are written with curly brackets, and they have keys and values
==================================================================
#Add a new key:value to dictionary?
d = {'key':'value'}
print(d)
d['mynewkey'] = 'mynewvalue'
print(d)
#{'key': 'value'}
#{'key': 'value', 'mynewkey': 'mynewvalue'}

x = {1:2}
print(x)
x.update({3:4})
print(x)
#{1: 2}
#{1: 2, 3: 4}
===========================================================================
#Create a Nested dictionary? And how to access values in this created dictionary
You can create a nested dictionary using a nested syntax, just like you would define a JSON object.
a = {
   'foo': 45,
   'bar': {
      'baz': 100,
     'tru': "Hello"
   }
}
You can access the objects just like you would access a normal dict. You can also use chaining of [] 
operators to get the deeper levels without declaring additional variables. For example,
a = {
   'foo': 45,
   'bar': {
      'baz': 100,
      'tru': "Hello"
   }
}
print(a['bar']['baz'])
#100

dict = {'result':[{'key1':'value1','key2':'value2'}, {'key1':'value3','key2':'value4'}]}
new_result = [{'new_key1':'new_value1','new_key2':'new_value2'}, {'new_key1':'value3','new_key2':'value4'}]
dict['new_result'] = new_result
print(dict)
#{'result': [{'key1': 'value1', 'key2': 'value2'}, {'key1': 'value3', 'key2': 'value4'}], 'new_result': [{'new_key1': 'new_value1', 'new_key2': 'new_value2'}, {'new_key1': 'value3', 'new_key2': 'value4'}]}

dict = {'result':[{'key1':'value1','key2':'value2'}, {'key1':'value3','key2':'value4'}]}
new_result = {'new_key1':'new_value1','new_key2':'new_value'}
# use append() to add new_result to list
dict['result'].append(new_result)
print(dict)
#{'result': [{'key1': 'value1', 'key2': 'value2'}, {'key1': 'value3', 'key2': 'value4'}, {'new_key1': 'new_value1', 'new_key2': 'new_value'}]}


import json
j = """
[{
"_id": {
     "$oid": "5968dd23fc13ae04d9000001"
   },
   "product_name": "sildenafil citrate",
   "supplier": "Wisozk Inc",
   "quantity": 261,
   "unit_cost": "$10.47"
 }, {
   "_id": {
     "$oid": "5968dd23fc13ae04d9000002"
   },
   "product_name": "Mountain Juniperus ashei",
   "supplier": "Keebler-Hilpert",
   "quantity": 292,
   "unit_cost": "$8.74"
 }, {
   "_id": {
     "$oid": "5968dd23fc13ae04d9000003"
   },
   "product_name": "Dextromathorphan HBr",
   "supplier": "Schmitt-Weissnat",
   "quantity": 211,
   "unit_cost": "$20.53"
 }]"""
d = json.loads(j)
print(d)
#[{'_id': {'$oid': '5968dd23fc13ae04d9000001'}, 'product_name': 'sildenafil citrate', 'supplier': 'Wisozk Inc', 'quantity': 261, 'unit_cost': '$10.47'}, {'_id': {'$oid': '5968dd23fc13ae04d9000002'}, 'product_name': 'Mountain Juniperus ashei', 'supplier': 'Keebler-Hilpert', 'quantity': 292, 'unit_cost': '$8.74'}, {'_id': {'$oid': '5968dd23fc13ae04d9000003'}, 'product_name': 'Dextromathorphan HBr', 'supplier': 'Schmitt-Weissnat', 'quantity': 211, 'unit_cost': '$20.53'}]
=====================================================================================
#Difference between tuple and list. 
The main difference between lists and a tuples is the fact that lists are mutable whereas tuples are immutable.

tup_colors = ('red', 'blue', 'green')
list_colors = ['red', 'blue', 'green']
print(tup_colors)
print(list_colors)
#('red', 'blue', 'green')
#['red', 'blue', 'green']

colors = ('red', 'blue', 'green')
colors[1]='yellow'
print(colors)
#TypeError: 'tuple' object does not support item assignment

Lists are for variable length , tuples are for fixed length .
Tuples show structure whereas lists show order .
==============================================================================
#Create a tuple? Add a new value to it? Possible or not ?
#if you can then is it the same tuple? (Memory location you have to show)

a = ('2')
b = 'b'
l = list(a)
l.append(b)
print(tuple(l))
#('2', 'b')

a = ('2',)
items = ['o', 'k', 'd', 'o']
l = list(a)
for x in items:
    l.append(x)
print (tuple(l))
#('2', 'o', 'k', 'd', 'o')
=======================================================================
#How to change datatypes in python if one is immutable and other is mutable?






==========================================================================
#Sort and sorted difference
The primary difference between the list sort() function and the sorted() function is 
that the sort() function will modify the list it is called on. The sorted() function 
will create a new list containing a sorted version of the list it is given. 
The sorted() function will not modify the list passed as a parameter. 
If you want to sort a list but still have the original unsorted version, then you would 
use the sorted() function. If maintaining the original order of the list is unimportant, 
then you can call the sort() function on the list.
A second important difference is that the sorted() function will return a list so you must 
assign the returned data to a new variable. The sort() function modifies the list in-place 
and has no return value.

vegetables = ['squash', 'pea', 'carrot', 'potato']
new_list = sorted(vegetables)
# new_list = ['carrot', 'pea', 'potato', 'squash']
print(new_list)
# vegetables = ['squash', 'pea', 'carrot', 'potato']
print(vegetables)
vegetables.sort()
# vegetables = ['carrot', 'pea', 'potato', 'squash']
print(vegetables)
================================================================================
#Major difference between python and other programming or scripting languages.
-Simplicity - We can say that Python is a minimalistic language. It is very easy to write and read.
And when it is time to think about a problem, a developer can focus on the issue, not on the 
language and its syntax.
-It's free - Python is free and open source. It means that the developers don't have to pay for 
anything. They can share, copy and change it. This fact has also helped Python to create a very 
strong community around itself which only makes it stronger and develops the technology very fast. 
The community allows professionals to share their knowledge and experience with beginners.
-Compatibility - Python supports procedure-oriented as well as object-oriented programming. 
In the procedure-oriented programming, a developer applies reusable pieces of code. 
The object-oriented programming uses objects which are based on data and functionality. 
Despite the fact that OOP languages are usually very complex, Python managed to stay simple and neat.
-LIbraries - Python community has created a huge pile of various libraries for Python. 
With their help, you can manage documentation, perform unit testing, databases, web browsers, email, 
cryptography, graphical user interface and many more things. All there stuff is included in the 
standard library, however, except it, there are a lot of other libraries available.

Python is used for developing many popular Web products 
Youtube.
Google.
Yahoo! map.
Shopzilla.
Ultraseek.
==============================================================================
#What is .pyc file in python ? Why python creates it?
Python automatically compiles your script to compiled code, so called byte code, 
before running it. When a module is imported for the first time, or when the source
is more recent than the current compiled file, a .pyc file containing the compiled
code will usually be created in the same directory as the .py file.

One reason that a .pyc file may not be created is permissions problems with the directory.
This can happen, for example, if you develop as one user but run as another, such as if
you are testing with a web server. Creation of a .pyc file is automatic if you’re importing 
a module and Python has the ability (permissions, free space, etc.) to write the compiled 
module back to the directory.

Since Python has to be converted to bytecode before it can be interpreted, keeping .pyc files 
around can help speed up execution, since you don't have to recompile. If there's a .pyc file
around, there should be a .py file around with the same name.

We consider first the .pyc file type. Files of type .pyc are automatically generated by
the interpreter when you import a module, which speeds up future importing of that module.
These files are therefore only created from a .py file if it is imported by another 
.py file or module.
=========================================================================================
 #use of .pyc files
.pyc are binary versions of .py files used as a machine readable python code that your 
computer can easily understand and run. .pyc file contain bytecode. this is the compiled
 bytecode of the .py source file.
=====================================================================================
#Write a print statement using format method. 
print ("{}, A computer science portal for geeks.".format("GeeksforGeeks")) 
str = "This article is written in {}"
print (str.format("Python")) 
print ("Hello, I am {} years old !".format(18)) 
================================================================================
#A basic server client program. (UDP as a protocol call can be used as basic call he was looking for)
Python - Network Programming. Python provides two levels of access to network services. 
At a low level, you can access the basic socket support in the underlying operating system, 
which allows you to implement clients and servers for both connection-oriented and 
connectionless protocols.

Python provides two levels of access to network services. At a low level, you can access 
the basic socket support in the underlying operating system, which allows you to implement 
clients and servers for both connection-oriented and connectionless protocols.
Python also has libraries that provide higher-level access to specific application-level
network protocols, such as FTP, HTTP, and so on.
=====================================================================================
#UDP as a protocol
The user datagram protocol (UDP) works differently from TCP/IP. Where TCP is a stream 
oriented protocol, ensuring that all of the data is transmitted in the right order, UDP
is a message oriented protocol. UDP does not require a long-lived connection, so setting
up a UDP socket is a little simpler. On the other hand, UDP messages must fit within a 
single packet (for IPv4, that means they can only hold 65,507 bytes because the 65,535 
byte packet also includes header information) and delivery is not guaranteed as it is with TCP.
-Echo Server : Since there is no connection, per se, the server does not need to listen 
for and accept connections. It only needs to use bind() to associate its socket with 
a port, and then wait for individual messages.Messages are read from the socket using recvfrom(),
which returns the data as well as the address of the client from which it was sent.
-Echo Client: The UDP echo client is similar the server, but does not use bind() to attach 
its socket to an address. It uses sendto() to deliver its message directly to the server, 
and recvfrom() to receive the response.
===========================================================================================
#6-	How tear down will happen. 
Testing in framework.
The unittest unit testing framework was originally inspired by JUnit and has a similar 
flavor as major unit testing frameworks in other languages. It supports test automation, 
sharing of setup and shutdown code for tests, aggregation of tests into collections, and 
independence of the tests from the reporting framework.
==============================================================================
#oops #Class
Python is a multi-paradigm programming language. Meaning, it supports different programming approach.
One of the popular approach to solve a programming problem is by creating objects.
This is known as Object-Oriented Programming (OOP).
-Inheritance	A process of using details from a new class without modifying existing class.
-Encapsulation	Hiding the private details of a class from other objects.
-Polymorphism	A concept of using common operation in different ways for different data input.
-Class A class is a blueprint for the object.
-Object An object (instance) is an instantiation of a class. When class is defined, 
only the description for the object is defined. Therefore, no memory or storage is allocated.
-Methods Methods are functions defined inside the body of a class. 
They are used to define the behaviors of an object
-Inheritance Inheritance is a way of creating new class for using details of existing class 
without modifying it. The newly formed class is a derived class (or child class). 
Similarly, the existing class is a base class (or parent class).
-Encapsulation Using OOP in Python, we can restrict access to methods and variables. 
This prevent data from direct modification which is called encapsulation. In Python, 
we denote private attribute using underscore as prefix i.e single “ _ “ or double “ __“.
-Polymorphism Polymorphism is an ability (in OOP) to use common interface for multiple form (data types).
================================================================================
#self and cls
class maclass():
    A = "class method"

    def __init__(self):
        self.B = "instance method"

    def getA_s(self):
        print(self.A)

    def getA_c(cls):
        print(cls.A)

    def getB_s(self):
        print(self.B)

    def getB_c(cls):
        print(cls.B)

C = maclass()
C.getA_s()
C.getA_c()
C.getB_s()
C.getB_c()
which give me:

#class method
#class method
#instance method
#instance method

self is used in instance methods, cls is often used in class methods. ... 
You have to tell Python you want a staticmethod , which won't automatically 
get passed the instance of the class, ether by doing @staticmethod above the 
def line, or mymethod = staticmethod(mymethod) below the method body.

self - To access an attribute of an object, you need to prefix the attribute name with the object 
name (objname.attributename). The same way self is used to access an attribute inside the object 
(class) itself. So if you didn't prefix a variable with self in a class method, you wouldn't be 
able to access that variable in other methods of the class, or outside of the class. So you could 
omit it if you wanted to make the variable local to that method only. The same way if you had a 
method and you didn't have any variable you wanted to share with other methods, you could omit 
the self from the method arguments.

cls - Each instance creates it's own "copy" of the attributes, so if you wanted all the instances 
of a class to share the same variable, you would prefix that variable name with 'cls' in the class
declaration.
==========================================================================
#wrapper
Wrappers vastly simplify code by defining a set of common behaviors. 
In Python, a decorator serves a wrapper. The Python docs say a decorator is 
“A function returning another function, usually applied as a function transformation 
using the @wrapper syntax.”
==============================================================================
#list vs queue
-queue - A queue is  ordered, but you'll only work on elements at one end. All elements get inserted at the "end" and removed from the "beginning" (or head) of the queue. You can find out how many elements are in the queue, but you can't find out what, say, the "third" element is. You'll see it when you get there i.e. using FIFO or so.
Queue queueA = new LinkedList();
queueA.add("element 0");
queueA.add("element 1");
queueA.add("element 2");
queueA.remove();//element 0

-List - A list is also an ordered list of objects. You can add an element anywhere in the list, change an element anywhere in the list, or remove an element from any position in the list.
List listA = new ArrayList();
listA.add("element 0");
listA.add(1,"element 1");
listA.add("element 2");
listA.remove(1); //element 1

stack = ["Amar", "Akbar", "Anthony"] 
stack.append("Ram") 
stack.append("Iqbal") 
print(stack) 
print(stack.pop()) 
print(stack) 
print(stack.pop()) 
print(stack) 

#['Amar', 'Akbar', 'Anthony', 'Ram', 'Iqbal']
#Iqbal
#['Amar', 'Akbar', 'Anthony', 'Ram']
#Ram
#['Amar', 'Akbar', 'Anthony']

from collections import deque 
queue = deque(["Ram", "Tarun", "Asif", "John"]) 
print(queue) 
queue.append("Akbar") 
print(queue) 
queue.append("Birbal") 
print(queue) 
print(queue.popleft())                  
print(queue.popleft())                  
print(queue) 

#deque(['Ram', 'Tarun', 'Asif', 'John'])
#deque(['Ram', 'Tarun', 'Asif', 'John', 'Akbar'])
#deque(['Ram', 'Tarun', 'Asif', 'John', 'Akbar', 'Birbal'])
#Ram
#Tarun
#deque(['Asif', 'John', 'Akbar', 'Birbal'])


q = []
for i in range( 0, 5 ):
    q.append( i ) # Add to back of queue
while q: # Queue not empty
    j = q.pop( 0 ) # Get from front of queue
    print( j )
# Output: 0 1 2 3 4
=============================================================================
#deque
Deque - can be implemented in python using the module “collections“. Deque is preferred over list in the cases where we need quicker append and pop operations from both the ends of container, as deque provides an O(1) time complexity for append and pop operations as compared to list which provides O(n) time complexity.
Operations on deque :
1. append() :- This function is used to insert the value in its argument to the right end of deque.
2. appendleft() :- This function is used to insert the value in its argument to the left end of deque.
3. pop() :- This function is used to delete an argument from the right end of deque.
4. popleft() :- This function is used to delete an argument from the left end of deque


de = collections.deque([1,2,3]) 
de.append(4) 
print ("The deque after appending at right is : ") 
print (de) 
de.appendleft(6) 
print ("The deque after appending at left is : ") 
print (de) 
de.pop() 
print ("The deque after deleting from right is : ") 
print (de) 
de.popleft() 
print ("The deque after deleting from left is : ") 
print (de) 

#The deque after appending at right is : 
#deque([1, 2, 3, 4])
#The deque after appending at left is : 
#deque([6, 1, 2, 3, 4])
#The deque after deleting from right is : 
#deque([6, 1, 2, 3])
#The deque after deleting from left is : 
#deque([1, 2, 3])
=============================================================================
#sort
vowels = ['e', 'a', 'u', 'o', 'i']
vowels.sort()
print('Sorted list:', vowels)
#Sorted list: ['a', 'e', 'i', 'o', 'u']
====================================================================
#union amnd intersection in list
def intersection(lst1, lst2): 
    lst3 = [value for value in lst1 if value in lst2] 
    return lst3 
lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69] 
lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26] 
print(intersection(lst1, lst2))
#[9, 11, 26, 28]

def intersection(lst1, lst2): 
    return list(set(lst1) & set(lst2))   
lst1 = [15, 9, 10, 56, 23, 78, 5, 4, 9] 
lst2 = [9, 4, 5, 36, 47, 26, 10, 45, 87] 
print(intersection(lst1, lst2))
#[9, 10, 4, 5]
==========================================================
A = {0, 2, 4, 6, 8}; 
B = {1, 2, 3, 4, 5}; 
# union 
print("Union :", A | B) 
# intersection 
print("Intersection :", A & B) 
# difference 
print("Difference :", A - B) 
# symmetric difference 
print("Symmetric difference :", A ^ B)

#Union : {0, 1, 2, 3, 4, 5, 6, 8}
#Intersection : {2, 4}
#Difference : {0, 8, 6}
#Symmetric difference : {0, 1, 3, 5, 6, 8}
============================================================
#append and extend
append adds its argument as a single element to the end of a list. 
The length of the list itself will increase by one. extend iterates 
over its argument adding each element to the list, extending the list. 
The length of the list will increase by however many elements were in the 
iterable argument.


my_list = ['geeks', 'for'] 
my_list.append('geeks') 
print(my_list) 
#['geeks', 'for', 'geeks']


my_list = ['geeks', 'for', 'geeks'] 
another_list = [6, 0, 4, 1] 
my_list.append(another_list) 
print(my_list)
#['geeks', 'for', 'geeks', [6, 0, 4, 1]]

my_list = ['geeks', 'for'] 
another_list = [6, 0, 4, 1] 
my_list.extend(another_list) 
print(my_list)
#['geeks', 'for', 6, 0, 4, 1]

A string is an iterable, so if you extend a list with a string, you’ll append each character as you iterate over the string.
my_list = ['geeks', 'for', 6, 0, 4, 1] 
my_list.extend('geeks') 
print(my_list)
#['geeks', 'for', 6, 0, 4, 1, 'g', 'e', 'e', 'k', 's']
==============================================================
http://net-informations.com/python/iq/checking.htm

Json file operation
Dict file operation
modules name 
file handelling operation
