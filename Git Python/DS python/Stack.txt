========================================
=========Stack==========================
========================================
1. In the english dictionary the word stack means arranging objects on over another. 
It is the same way memory is allocated in this data structure. 
It stores the data elements in a similar fashion as a bunch of plates are stored one 
above another in the kitchen. So stack data strcuture allows operations at one end wich 
can be called top of the stack. We can add elements or remove elements only form this en dof the stack.

class abc:
    def __init__(self):
        self.list1 = []

    def add(self,x):
        if x not in self.list1:
            self.list1.append(x)
            return True
        else:
            return False
    def abc01(self):
        return self.list1[0]

obj = abc()
obj.add("mon")
obj.add("tues")
print(obj.abc01())
#mon


class abc:
    def __init__(self):
        self.list1 = []

    def add(self,x):
        if x not in self.list1:
            self.list1.append(x)
            return True
        else:
            return False
    def abc01(self):
        return self.list1[-1]

obj = abc()
obj.add("mon")
obj.add("tues")
print(obj.abc01())
print(obj.list1)
#tues
#['mon', 'tues']


class abc:
    def __init__(self):
        self.list1 = []
    def add(self,x):
        if x not in self.list1:
            self.list1.append(x)
            return True
        else :
            print("Duplicate element in list")
    def remove(self):
        if len(self.list1)<=0:
            print("no elements in list")
        else:
            return self.list1.pop()
obj = abc()
obj.add("mon")
obj.add("tues")
obj.add("wed")
print(obj.list1)
print(obj.remove())
#['mon', 'tues', 'wed']
#wed













