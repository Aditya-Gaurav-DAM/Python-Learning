#basics of sql 
#youtube --> Easy Engineering Classes
#mysql
=================================================================
#Setup Database and Tables for Complete MySQL Course
=================================================================
create database college;
use college;

create table Faculty(Fid int,Fname varchar(100),Qualification varchar(50),DeptId int);
create table Students(Sid int,Sname varchar(100),Branch varchar(50),marks int);
create table Dept(deptID int,dname varchar(20));

insert into Faculty values(101,'Aman','B.tech',01);
insert into Faculty values(102,'Anshu','BCA',02);
insert into Faculty values(103,'Anuj','BCA',02);
insert into Faculty values(104,'chetan','B.pharma',04);
insert into Faculty values(105,'Bhanu','B.tech',01);
select * from Faculty;

insert into Students values(101,'Aman','IT',75);
insert into Students values(102,'Anshu','CS',54);
insert into Students values(103,'Anuj','IT',45);
insert into Students values(104,'Chetan','CS',76);
insert into Students values(105,'Bhanu','IT',72);
select * from student;

insert into Dept(1001,'cs');
insert into Dept(1002,'EC');
insert into Dept(1003,'MECH');
insert into Dept(1004,'EE');
insert into Dept(1005,'cs');
select * from Dept;

================================================================
#Select Statement, Distinct Clause with Example Queries
=================================================================
select column1,column2 . . . From table1.table2 . .  .;
use college; --> to change database
select fname from faculty;
select fid,fname from faculty;
select deptid,dname from Dept

#select * from table_name  --> to fetch all data
#select Distinct columns from table_name --> to fetch

select * from Dept;
select * from student;
select branch from student;
select distinct branch from student;

select * from faculty;
select distinct qualification ,deptid from faculty;
commit; --> Always use the commit before closing or else data will not store.
==============================================================
#Where Clause, Logical(AND, OR) Operator
===============================================================
#to filter the data we vcan use where clause. where clause allows to filter row based on 
#certain conditions or expression. 

select column1,column2,. . . from table1,table2 where condition ...
#filtering data with operator 
# = equal to 
# <> or != not equal to 
# < less than
# > greater than
# <= less that or equal to 
# >= greater than or equal to 
# and operator --> return true if both true
# or operator --> return trur either condition true

use college 
select * from faculty;
select fid,fname from faculty where qualification='B.Tech';
# use '' if its varchar, use nothing if it is int
select * from faculty where qualification != 'ph.D';

select * from student;
select sname from student where Branch='IT' and marks<80;
select sname from student where Branch='IT' or Branch='ECE';  
==================================================================
# IN, NOT IN Operator with Solved Queries
==================================================================
#filtering data--> in operator (used to filter data and allows to
#determine if the value matches any one of the list or result of subquery.)
select coumn1,column2,...from table1,table2,..where(expr|column_1)in ('value1','value2');

#filtering data--> not in operator (used to filter data and allows to
#determine if the value does not matches any one of the list or result of subquery.)
select coumn1,column2,...from table1,table2,..where(expr|column_1)not in ('value1','value2');

select * from faculty;
select fname from faculty where deptid=1 or deptid=3;
select fname from faculty where deptid in (1,3);
select * from faculty wherer qualification in ('B.tech','Ph.D');
select * from faculty where branch not in('CS','EC');
==================================================================
#Between and NOT Between Operator with Solved Queries
==================================================================
#filtering data--> BETWEEN operator (used to filter data and allows to
#SEPCIFY range 0 value to test.)
select coumn1,column2,. . from table1,table2,. .  where (expr|column) between begin and end;

use college;
select * from student;
select * from student where marks between 60 and 90;
select * from student where marks not between 50 and 60;
====================================================================
#LIMIT and IS NULL Operator with Solved Queries
====================================================================
#Limit is used to constrain the number of rows returned by select statement.
#select col1,col2,. . from tab1,tab2,. . limit offset,count;

#fetch first N rows in mysql.
#select col1,col2,. . from table limit n;

#IS NULL operator
#IS NULL operator used to check whether a value is null or not
#opposite of NULL is NOT NULL.

use college;
star * from faculty;
select * from faculty limit 4;
select * from faculty limit 0,4;
select * from faculty limit 1,4;

select * from student;
select * from student order by marks desc;
select * from student order by marks desc limit 1,1;
select sname from student order by marks desc limit 1,1;
select sname from student where branch is null;
select sname from student where branch is not null;
====================================================================
#LIKE Operator with Solved Queries
====================================================================
#like operator --> to search or match the patterns.
#it is used to select rows/data based on patterns following by 
#two wildcards characters used with like operator
#percentage - (%) it matches any string of zero or more character
#underscore - (_) it matches exactly one single character
#select column from table where condition like 'pattern';

use college;
select * from faculty;
select * from faculty where fname like 'A%';
select * from faculty where fname like '%N';
select * from faculty where fname like '_A%';
select sname from faculty where fname like '_A%';
select sname from faculty where fname not like '%N';
select sname,marks from student where sname  not like '_A%';
===============================================================
#ORDER BY Clause with Solved Examples
================================================================
#Order By - it is useed to sort the result of select statement.
#select column from table order by column1[ASC|DESC], column2[ASC|DESC], . 
#by default sorting asc 

select * from student;
select * from student order by sname;
select * from student order by sname asc;
select * from student order by sname desc;
select * from student order by marls desc;
select * from student order by sname asc, marks desc;
select * from student order by sname desc, marks asc;

select * from faculty by qualification;
select * from faculty order by field(qualification,'M.Tech','Ph.D','B.Tech');
=============================================================
#JOINS - Cross, Inner, Left, Right and Self Join with Solved Examples
=============================================================
#Join - it is method of linking one table with another table.
1.Cross join
2.inner join
3.left join
4.right join
#mysql does not support full pouter join.
#self join

1.cross join - It returns the cartesian product of rows from the joiner tables.
select * from T1 cross join T2 where join_condition[optional];

use college; #to changed database
select * from faculty;
select * from dept;
select * from faculty cross join dept;
select * from faculty cross join dept where dept.deptid=1;

#inner join -> it matches rows of one table with another table.
select col_list from t1 inner join t2 on join_condition;
select f.fname,d.dname from faculty f inner join dept d ON f.deptid=d.deptid;
select f.fname,d.dname from faculty f inner join dept d ON f.deptid=d.deptid where d.deptid=2;

#left join --> it results all the matching rows from two tables and also the rows that are not
#matched from lest table.
select col from table1 left join table2 on join_condition;
select f.fname,d.dname from faculty f left join dept d on f.deptid=d.deptid;

#right join --> it results all the matching rows from two tables and also the rows that are not
#matched from left table.
select col from table1 right join table2 on join_condition;
select f.fname,d.dname from faculty f righjt join dept d on f.deptid=d.deptid;

#self join --> used to join table from itself.
create table emp(empid int, ename varchar(20), esuper int);
insert into emp(1,'A',2);
insert into emp(2,'B',3);
insert into emp(3,'C',4);
SELECT * from  emp;
select e.ename as "employee name", s.name as "supervisor" from emp e,emp s where e.esuper = s.empid;

====================================================
#GROUP BY and HAVING Clause with Solved Examples
====================================================
Group by clause is a set of rtows into a set of summary rows by values of column or expressions.
Generally it is used with aggregates functions like SUM | AVG | MAX | MIN | COUNT
SELECT col1,col2,. . aggregate_function(col) from tablename where condition group by col1,col2,..;
use college; --> database changed
select * from student;
select sum(marks) from student;

#group by with having  
this clause is used to filter the groups returned.
select col1,col2,... aggregate_function(col) from tableName where condition group by col1,col2.,.. having condition;
select count(*) from student --> to find all 
select branch,count(*) from student group by branch;
select branch,sum(marks) from student group by branch;
select branch,avg(marks) from student group by branch;
select branch,avg(marks) from student group by branch having branch in ('cse','it');
=======================================================================
SubQuery(Nested Query) with EXISTS and NOT EXISTS Clause
======================================================================
nested quey -->  subquery is nested query within another queries like select,insert,update or delete.
select col1,col2,.. from tablename where condition[=|in|not in...] {nested query}
use college 
select fname from faculty where deptid IN(select deptid from dept where dname = 'IT');
select fname from faculty where deptid = (SELECT deptid from dept where dname = 'IT');
#select fname from faculty where deptid = (select deptid from dept where dname IN('IT','CSE')); --> ERROR
select fname from faculty where deptid IN(select deptid from dept where dname IN('IT','CSE')); --> ERROR
SELECT BRANCH,avg(marks) from student where branch in(select dname from dept where deptid not in (1,3)) group by branch;

#exist or not exist
select * from table_name where exists|not exists(subquery);
#exist : it is used to test for the existance of any record in a subquery.
select * from student where exists (select * from dept where deptid=1);
select * from student where exists (select * from dept where deptid=5); --> empty set
select * from student where not exists (select * from dept where deptid=1); --> empty set
select * from student where not exists (select * from dept where deptid=5); --> it will run 

===========================================================================
UNION, UNION ALL, INTERSECT and MINUS Set Operators
==============================================================================
#union --> this operator is used to combine two or more result sets into single result set. By default, 
#union operator removes duplicate rows(use union all to retain duplicate rows)
select col1,col2,.. from table1 union|union all select col1,col2,.. from table2;
rules -->number and order and column must be same.
rules --> data types of the col must be same.
use college; --> to select database
select * from faculty;
select * from student;
select * from faculty;
select fname from faculty union select sname from student;
insert into student values(9,'varun','ECE',70);
#with duplicate data, it will not give duplicate data if we are using union.
#if we use union, duplicasy will automatically removed.
select fname from faculty union all select sname from student;

#intersect --> this operator is used to fetch common rows from two or more tables.
#it compares the result of two queries and returns the distinct rows that are output by both left and right queries.
select col1,col2,.. from table1 intersect select col1,col2,.. from table2;

====================================================
#GROUP BY and HAVING Clause with Solved Examples
====================================================
Group by clause is a set of rtows into a set of summary rows by values of column or expressions.
Generally it is used with aggregates functions like SUM | AVG | MAX | MIN | COUNT
SELECT col1,col2,. . aggregate_function(col) from tablename where condition group by col1,col2,..;
use college; --> database changed
select * from student;
select sum(marks) from student;

#group by with having  
this clause is used to filter the groups returned.
select col1,col2,... aggregate_function(col) from tableName where condition group by col1,col2.,.. having condition;
select count(*) from student --> to find all 
select branch,count(*) from student group by branch;
select branch,sum(marks) from student group by branch;
select branch,avg(marks) from student group by branch;
select branch,avg(marks) from student group by branch having branch in ('cse','it');
=======================================================================
SubQuery(Nested Query) with EXISTS and NOT EXISTS Clause
======================================================================
nested quey -->  subquery is nested query within another queries like select,insert,update or delete.
select col1,col2,.. from tablename where condition[=|in|not in...] {nested query}
use college 
select fname from faculty where deptid IN(select deptid from dept where dname = 'IT');
select fname from faculty where deptid = (SELECT deptid from dept where dname = 'IT');
#select fname from faculty where deptid = (select deptid from dept where dname IN('IT','CSE')); --> ERROR
select fname from faculty where deptid IN(select deptid from dept where dname IN('IT','CSE')); --> ERROR
SELECT BRANCH,avg(marks) from student where branch in(select dname from dept where deptid not in (1,3)) group by branch;

#exist or not exist
select * from table_name where exists|not exists(subquery);
#exist : it is used to test for the existance of any record in a subquery.
select * from student where exists (select * from dept where deptid=1);
select * from student where exists (select * from dept where deptid=5); --> empty set
select * from student where not exists (select * from dept where deptid=1); --> empty set
select * from student where not exists (select * from dept where deptid=5); --> it will run 

===========================================================================
UNION, UNION ALL, INTERSECT and MINUS Set Operators
==============================================================================
#union --> this operator is used to combine two or more result sets into single result set. By default, 
#union operator removes duplicate rows(use union all to retain duplicate rows)
select col1,col2,.. from table1 union|union all select col1,col2,.. from table2;
rules -->number and order and column must be same.
rules --> data types of the col must be same.
use college; --> to select database
select * from faculty;
select * from student;
select * from faculty;
select fname from faculty union select sname from student;
insert into student values(9,'varun','ECE',70);
#with duplicate data, it will not give duplicate data if we are using union.
#if we use union, duplicasy will automatically removed.
select fname from faculty union all select sname from student;

#intersect --> this operator is used to fetch common rows from two or more tables.
#it compares the result of two queries and returns the distinct rows that are output by both left and right queries.
select col1,col2,.. from table1 intersect select col1,col2,.. from table2;
=============================================================================
INSERT, UPDATE, DELETE Statement with Examples
=============================================================================
#data manipulation language 
insert statement is used to insert data into database tables.
insert into table(col1,col2,..) values (value1,value2,..);
#inserting multiple rows -->
insert into table(col1,col2,..) values(value1,value2,..),() 
 
insert into dept(5,'ICE');
select * from dept;
insert into dept('ICE',5); --> it will give error
insert into dept(dname,deptid) values ('ICE',6); --> no error
insert into dept values (7,'A'),(8,'B');
SELECT * FROM DEPT;

#insert with select statement 
insert with select clause - it is used to insert data into table fromanother table.
insert into table_name select col1,col2,..from table_name;
create table dept_temp(deptid int, deptname varchar(20));
insert into dept_temp select deptid,dname from dept; --> it will fetch all data from dept to dept_temp;
select * from dept_temp;

modifying data --> this ststement is used to update existing data in a table.
update table_name set col1 = exp1, col2 = exp2,.. where condition;
update dept_temp set deptname = 'Applied SC' where deptid=7;
update dept_temp set deptname = 'Applied SC'; --> all deptname will become same 

#update with select statement.
update table_name set col1=(nested query) where condition;
select * from student;
update dept_temp set deptname = (select branch from student where sanme='lalit') where deptid=1;
select * from dept_temp;

#delete statement is used to delete data from table,
delete from table_name where condition[optional];

3delete with limit clause is used to delete specific number of records.
example - delete first two students records.
delete from dept_temp wherre deptid=2;
delete from dept_temp limit 2; --> it will delete 2 column.
select * from dept_temp;
delete from dept_temp;
select * from dept_temp; --> empty set
================================================================
#Managing Database in MySQL - Show, Create, Use and Drop
================================================================
create database --> use 'create database<database name>'
display database --> use 'show database' to display all database
selecting database to work --> use 'use database name' to select the database you want to work with.
remove database --> use 'drop <database name>' to remove the database.
#show database --> it will show all database
create database abc; --> it will create database
drop database abc; --> it will delete database
===================================================================
Create Table with Constraints(NOT NULL, Unique, etc..)
====================================================================
create table --> create table <table name>(col1 datatype,col2 datatype,...)
#various constraints-
1.NOT NULL OR NULL
2.AUTO_INCREMENT
3.DEFAULT
4.UNIQUE
5.CHECK

USE COLLEGE;
create table emp(empid int,ename varchar(40),salary int); --> error(already exists)
create table new_emp(empid int,ename varchar(40),salary int); --> new table will create
insert into emp_new(1,'a',2000);
select * from emp_new;

Not null --> this constraint forces the values of column to non-null values only.
syntax --> col_name data_type not null;
steps - 
check the current cvalues of the column
update the null values of the column
add not null constraint.

insert into emp_new(empid,ename) values(1,'B');
select * from emp_new;
#one col of salary will null

create table emp1(empid int, ename varchar(20), salary int Not null);
insert into emp1(empid,ename) values(1,'A'); error-->field salary doesnt have a default value 
insert into emp1(empid,ename,salary) values(1,'A',1000); --> no error
# we can also apply not null in existing column.    

select * from emp_new;
update emp_new set salary = 0 where salary = null;
alter table emp_new change salary int not null;
describe emp_new;
insert into emp_new(emp_id) values(4);

#unique constraint--> this constraint forces the column to have unique value only.
col_name data_type unique;
unique constraints on multiple columns:
constraint constraint_name unique(col1,col2,..)
create table emp2(empid int unique,ename varchar(40),salary int);
insert into emp2(empid) values(1);

create table emp2(empid int unique , ename varchar(20), salary int);
insert into emp2(empid) values(1); --> success
insert into emp2(empid) values(1); --> error : duplicate entry'1' for keys 'empid'

create table emp3(empid int, ename varchar(40), salary int);
create table emp3(empid int,ename varchar(40), salary int, constraint u1 unique(empid,ename));
insert into emp3(empid,ename) values(1,'A');
insert into emp3(empid,ename) values(1,'B');
insert into emp3(empid,ename) values(1,'B'); --> error duplicate entry 

#default constraint : this constraint is used to insert a default value into a column.
col_name data_type default value;
adding default constraint in existing table column:
alter table<table-name>
alter <col-name> set default 'value'
create table emp4(empid int, ename varchar(40),salary int default 1000);
insert into emp4(empid) values(3);
insert into emp4(empid,salary) values(4,2000);
select * from emp4;

#auto increment constraints: This constraints allows a unique number to be generated when a 
new record is inserted into a table.
syntax : col_name data_type auto_increment;
By default,the starting value for auto_increment is 1, and it will increment by 1 for each record.
it is used to create sequence in mysql.

create table emp5(empid int auto_increment primary key , ename varchar(40), salary int);
insert into emp5(salary) values(1000);
insert into emp5(salary) values(2000);
insert into emp5(salary) values(3000);
insert into emp5(salary) values(4000);
select * from emp5;

check constraint --> it constraints the certain column must satisfy the condition(boolean expression).
col_name data_type check(condition);
mysql doesnt support check keyword. There are two ways to emulate this: 
Using triggers or using updatable view with check option.

========================================================================
PRIMARY and FOREIGN KEY in MySQL with Example
=========================================================================
primary key: it is column or combination of column that uniqely identify a row in table.Rules :
1.primary key must be contain unique values.
2.Primary key cant be null.
3.there is only one primary keys in table.
syntax -> col_name data_type primary key 

use college;
create table emp1(empid int primary key, ename varchar(10));
create table emp2(empid int primary key, ename varchar(10));
describe emp2;
create table empo_new1(empid int, ename varchar(10), Primary key(empid,ename));
create table emp_new2(empid int, ename varchar(10));
describe emp_new2;
alter table emp_new2 add primary_key(empid);
describe emp_new2;

primary key on more than one column:
primary key(col1,col2,...)
primary key in existing table:
alter table<table-name>
add primary key(primary key column);

#foreign key--> It is a field in a table that matches another field of another table.
It is used to maintain referential integrity.
--> A table may have more than one of foreign key, and each foreign key in the child 
table may refer to a different parent table.
syntax --> foreign key(col_name) references <parent_table>(col_name)

create table e1(eid int primary key) engine=InnoDB;
create table d1(did int,foreign key(did)reference e1(eid)) emhine = InnoDB;

insert into e1 values(1);
insert into e1 values(2);
select * from e1;

insert into d1 values(1); --> no erroe
insert into d1 values(1); --> no error
insert into d1 values(1); --> error 

=============================================================
#ALTER, DROP, TRUNCATE Table with Examples
==============================================================
Alter table : It is used to change existing table structure such as adding or removing columns, changing column attributes, etc.
Syntax --> Alter table table_name action[,actiopn2,...]
1.Add new column
2.Drop a column
3.Rename Table
describe emp2;
alter table emp2 add column dept int Not null after empId;
alter table emp2 add column dept int Not null; --> if we dont apply after, it willa add in end.

alter table emp2 drop column temp; --> temp will drop.
rename table emp2 to emp6;
describe emp6; --> it will runn
describe emp6; --> it will not run 

#Drop table -->It is used to remove existing tables.
#Truncate table --> It is a statement which is used to delete all data in table.
select * from table emp5;
truncate table emp5;
select * from emp5;
describe emp5; --> structure will remain alive
drop table emp5;
====================================================
Indexes in MySQL - CREATE, View and Delete Index
====================================================
Index --> An index helps in fast retrival of data from tables.
It is just like a index of book where you first search index to look for content.
- All primary key columns are in the primary index of the table automatically.
creating Mysql index:
create [unique|fulltext|spatial] index index_name 
using [Btree|Hash|Rtree] on table_name/column_name[(length)][ASC|DESC]..) 

CREATE emp_new3(eid int,ename varchar(10));
create index i1 on emp_new3(eid);
show index from emp_new3\G

Drop index l1 on emp_new3;
show index from emp_new3\G; --> empty set

===============================================================
VIEWS in MySQL - Create View, With Check Option, Manage Views
==============================================================
view --> a database view is a virtual table that is derived from
physical/real table. Advantages of views are as follows:
1.simplifies the complex queries.
2.limits data access to specific users.
3.provides extra layer of security.
4.it enables computed columns.
Disadvantages --
1.performances decrease
2.depedency on tables.

syntax --> create view<view-name> as [select statement]
select * from student;
create view viewname as select * from student wherer branch in ('IT','CSE');
select * from viewname;

create view viewname2 as select f.fname, d.dname from faculty f, department d where f.deptid = d.deptid;
select * from view2;
create view view3 as select sname,marks from student where marks>(select avg(marks) from student);
select * from view3;
insert into student values(10,'marry','eee',90);
select * from view3;

#updatable views --> It means to use insert,update and delete statement on view.

